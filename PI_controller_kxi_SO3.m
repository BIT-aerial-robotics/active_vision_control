function [sys,x0,str,ts]=PI_controller_kxi_SO3(t,x,u,flag)
switch flag
    case 0   %调用初始化函数
        [sys,x0,str,ts]=mdlInitializeSizes(t,x,u);      
    case 3   %调用输出量的计算函数
        sys=mdlOutputs(t,x,u);
    case {2,4,9}  %未使用过的flag值
        sys=[];
    otherwise %处理错误
        error(['Unhandled flag=',num2str(flag)]);
end
%=======================================================================
%当flag为0时进行整个系统的初始化
%=======================================================================
function [sys,x0,str,ts]=mdlInitializeSizes(t,x,u)
%首先调用simsizes函数得出系统规模参数sizes,并根据离散系统的实际情况设置
%sizes变量
sizes=simsizes;
sizes.NumDiscStates=0;
sizes.NumOutputs=3;
sizes.NumInputs=12;
sizes.DirFeedthrough=1;
sizes.NumSampleTimes=1;
sys=simsizes(sizes);
x0=[];
str=[];
ts=[0 0];
%=======================================================================
%当flag为3时,计算系统的输出变量:返回两个状态
%=======================================================================
function sys=mdlOutputs(t,x,u)
%Servo system Parameters

ksi_out=1.414;
% ksi_out=0.707;
omega_roll_out=1.5;
omega_pitch_out=1.5;
omega_yaw_out=1.4;
a=u(1);
b=u(2);
c=u(3);
p=u(4);
q=u(5);
r=u(6);  %nominal value
a_err=u(7);
b_err=u(8);
c_err=u(9);
a_err_int=u(10);
b_err_int=u(11);
c_err_int=u(12);

%alfa (from the damping and bandwidth)
alfa_112=2*ksi_out*omega_roll_out;
alfa_122=2*ksi_out*omega_pitch_out;
alfa_132=2*ksi_out*omega_yaw_out;
alfa_111=omega_roll_out^2;
alfa_121=omega_pitch_out^2;
alfa_131=omega_yaw_out^2;

if a==0 && b==0 && c==0 
    dexp_neg_ksi=eye(3);
    partial_invdexp=zeros(3,3);    
else 

dexp_neg_ksi=[[1+(1-2*sin(1/2*(a^2+b^2+c^2)^(1/2))/(a^2+b^2+c^2)^(1/2)*cos(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(-c^2-b^2),2*sin(1/2*(a^2+b^2+c^2)^(1/2))^2/(a^2+b^2+c^2)*c+(1-2*sin(1/2*(a^2+b^2+c^2)^(1/2))/(a^2+b^2+c^2)^(1/2)*cos(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*b*a,-2*sin(1/2*(a^2+b^2+c^2)^(1/2))^2/(a^2+b^2+c^2)*b+(1-2*sin(1/2*(a^2+b^2+c^2)^(1/2))/(a^2+b^2+c^2)^(1/2)*cos(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*c*a]
[-2*sin(1/2*(a^2+b^2+c^2)^(1/2))^2/(a^2+b^2+c^2)*c+(1-2*sin(1/2*(a^2+b^2+c^2)^(1/2))/(a^2+b^2+c^2)^(1/2)*cos(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*b*a,1+(1-2*sin(1/2*(a^2+b^2+c^2)^(1/2))/(a^2+b^2+c^2)^(1/2)*cos(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(-c^2-a^2),2*sin(1/2*(a^2+b^2+c^2)^(1/2))^2/(a^2+b^2+c^2)*a+(1-2*sin(1/2*(a^2+b^2+c^2)^(1/2))/(a^2+b^2+c^2)^(1/2)*cos(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*b*c]
[2*sin(1/2*(a^2+b^2+c^2)^(1/2))^2/(a^2+b^2+c^2)*b+(1-2*sin(1/2*(a^2+b^2+c^2)^(1/2))/(a^2+b^2+c^2)^(1/2)*cos(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*c*a,-2*sin(1/2*(a^2+b^2+c^2)^(1/2))^2/(a^2+b^2+c^2)*a+(1-2*sin(1/2*(a^2+b^2+c^2)^(1/2))/(a^2+b^2+c^2)^(1/2)*cos(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*b*c,1+(1-2*sin(1/2*(a^2+b^2+c^2)^(1/2))/(a^2+b^2+c^2)^(1/2)*cos(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(-b^2-a^2)]];
 
% inv_dexp_neg_ksi=[[1+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(-c^2-b^2),-1/2*c+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*b*a,1/2*b+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*c*a]
% [1/2*c+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*b*a,1+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(-c^2-a^2),-1/2*a+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*c*b]
% [-1/2*b+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*c*a,1/2*a+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*c*b,1+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(-b^2-a^2)]];


partial_invdexp=[[(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(b*q+c*r)+((-c^2-b^2)*p+b*a*q+c*a*r)*((1/4/tan(1/2*(a^2+b^2+c^2)^(1/2))^2*a-1/2/(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2))*a+1/4*a)/(a^2+b^2+c^2)-2*(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)^2*a),1/2*r+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(-2*b*p+a*q)+((-c^2-b^2)*p+b*a*q+c*a*r)*((1/4/tan(1/2*(a^2+b^2+c^2)^(1/2))^2*b-1/2/(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2))*b+1/4*b)/(a^2+b^2+c^2)-2*(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)^2*b),-1/2*q+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(-2*c*p+a*r)+((-c^2-b^2)*p+b*a*q+c*a*r)*((1/4/tan(1/2*(a^2+b^2+c^2)^(1/2))^2*c-1/2/(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2))*c+1/4*c)/(a^2+b^2+c^2)-2*(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)^2*c)]
[-1/2*r+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(b*p-2*a*q)+(b*a*p+(-c^2-a^2)*q+c*b*r)*((1/4/tan(1/2*(a^2+b^2+c^2)^(1/2))^2*a-1/2/(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2))*a+1/4*a)/(a^2+b^2+c^2)-2*(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)^2*a),(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(a*p+c*r)+(b*a*p+(-c^2-a^2)*q+c*b*r)*((1/4/tan(1/2*(a^2+b^2+c^2)^(1/2))^2*b-1/2/(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2))*b+1/4*b)/(a^2+b^2+c^2)-2*(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)^2*b),1/2*p+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(-2*c*q+b*r)+(b*a*p+(-c^2-a^2)*q+c*b*r)*((1/4/tan(1/2*(a^2+b^2+c^2)^(1/2))^2*c-1/2/(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2))*c+1/4*c)/(a^2+b^2+c^2)-2*(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)^2*c)]
[1/2*q+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(c*p-2*a*r)+(c*a*p+c*b*q+(-b^2-a^2)*r)*((1/4/tan(1/2*(a^2+b^2+c^2)^(1/2))^2*a-1/2/(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2))*a+1/4*a)/(a^2+b^2+c^2)-2*(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)^2*a),-1/2*p+(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(c*q-2*b*r)+(c*a*p+c*b*q+(-b^2-a^2)*r)*((1/4/tan(1/2*(a^2+b^2+c^2)^(1/2))^2*b-1/2/(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2))*b+1/4*b)/(a^2+b^2+c^2)-2*(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)^2*b),(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)*(a*p+b*q)+(c*a*p+c*b*q+(-b^2-a^2)*r)*((1/4/tan(1/2*(a^2+b^2+c^2)^(1/2))^2*c-1/2/(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2))*c+1/4*c)/(a^2+b^2+c^2)-2*(1-1/2*(a^2+b^2+c^2)^(1/2)/tan(1/2*(a^2+b^2+c^2)^(1/2)))/(a^2+b^2+c^2)^2*c)]];
end

%the gain matrix
%K_I1=[0,0,0;0,0,0;0,0,0];


K_I1=dexp_neg_ksi*diag([alfa_111; alfa_121; alfa_131]);

%K_p1=[1,0,0;0,1,0;0,0,1];
K_p1=dexp_neg_ksi*(partial_invdexp+diag([alfa_112; alfa_122; alfa_132]));

u1=K_p1*[a_err;b_err;c_err]+K_I1*[a_err_int;b_err_int;c_err_int];

%output 
sys(1)=u1(1);
sys(2)=u1(2);
sys(3)=u1(3);

